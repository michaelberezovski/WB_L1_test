package task3

import (
	"fmt"
	"sync"
)

func main() {

	var a = [5]int{2, 4, 6, 8, 12} //создаём массив
	wg := new(sync.WaitGroup)      //создаем группу ожидания для ожидания завершения всех горутин
	mutex := new(sync.Mutex)       //для доступа только одной горутины за раз к критической секции
	sum := 0

	for _, v := range a { //переборо изначального массива циклом с импользованием range
		wg.Add(1)        //для каждого элемента добавление в счётчик группы ожидания
		go func(v int) { //запуск новой горутины
			defer wg.Done() //после исполнения горутины убавить счетчик
			mutex.Lock()    //лочим доступ к result всем кроме одной горутины
			sum += v * v    //вычисляем
			mutex.Unlock()  //разблокируем
		}(v)
	}

	wg.Wait() //ожидаем завершения всех горутин
	fmt.Println(sum)
}
